/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 lungs.glb --types 
Author: E-learning UMCG (https://sketchfab.com/eLearningUMCG)
License: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)
Source: https://sketchfab.com/3d-models/healthy-heart-and-lungs-5c62cd4d4ba04243be1062d2263d3ef0
Title: Healthy heart and lungs
*/

import { Mesh, MeshStandardMaterial, Group, Box3, Vector3, MeshPhongMaterial, Material } from 'three'
import { useGLTF } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'
import type { ModelProps } from './Brain'
import { useEffect, useRef, useState } from 'react'
type GLTFResult = GLTF & {
  nodes: {
    normaal25_normaal25_0: Mesh
    normaal6_normaal6_0: Mesh
    normaal6_normaal6_0_1: Mesh
    normaal6_normaal6_0_2: Mesh
    normaal5_normaal5_0: Mesh
    normaal4_normaal4_0: Mesh
    linkerlong3_linkerlong3_0: Mesh
  }
  materials: {
    normaal25: MeshStandardMaterial
    normaal6: MeshStandardMaterial
    normaal5: MeshStandardMaterial
    normaal4: MeshStandardMaterial
    linkerlong3: MeshStandardMaterial
  }
  // animations: GLTFAction[]
}

export function Lungs(props: ModelProps) {
  const { setIsSelected, info, ...groupProps } = props
  const { nodes, materials } = useGLTF('/lungs.glb') as unknown as GLTFResult
  const groupRef = useRef<Group>(null);

  useEffect(() => {
    const box = new Box3().setFromObject(groupRef.current!);
    const center = box.getCenter(new Vector3());
    box.getCenter(center);
    groupRef.current!.position.sub(center);
  }, []);

  const initialState: Record<string, boolean> = {
    normaal25_normaal25_0: false,
    normaal6_normaal6_0: false,
    normaal6_normaal6_0_1: false,
    normaal6_normaal6_0_2: false,
    normaal5_normaal5_0: false,
    normaal4_normaal4_0: false,
    materialinkerlong3_linkerlong3_0ls2_6: false,
  }
  const [hovered, setHovered] = useState(initialState)

  function getMaterial(hovered: boolean, base: Material) {
    return hovered
      ? new MeshPhongMaterial({ color: 0xE5BEED }) // hover rengi
      : base
  }
  return (
    <group ref={groupRef} {...groupProps} dispose={null}>
      <group position={[-2.066, -26.478, 49.443]} rotation={[-2.848, 0.013, 0.042]} scale={0.007}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.normaal25_normaal25_0.geometry}
            material={getMaterial(hovered.normaal25_normaal25_0, materials.normaal25)}
            onPointerOver={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal25_normaal25_0: true }))
            }}
            onPointerLeave={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal25_normaal25_0: false }))
            }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('normaal25_normaal25_0') }}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.normaal6_normaal6_0.geometry}
            material={getMaterial(hovered.normaal6_normaal6_0, materials.normaal6)}
            onPointerOver={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal6_normaal6_0: true }))
            }}
            onPointerLeave={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal6_normaal6_0: false }))
            }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('normaal6_normaal6_0') }}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.normaal6_normaal6_0_1.geometry}
            material={getMaterial(hovered.normaal6_normaal6_0_1, materials.normaal6)}
            onPointerOver={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal6_normaal6_0_1: true }))
            }}
            onPointerLeave={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal6_normaal6_0_1: false }))
            }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('normaal6_normaal6_0_1') }}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.normaal6_normaal6_0_2.geometry}
            material={getMaterial(hovered.normaal6_normaal6_0_2, materials.normaal6)}
            onPointerOver={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal6_normaal6_0_2: true }))
            }}
            onPointerLeave={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal6_normaal6_0_2: false }))
            }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('normaal6_normaal6_0_2') }}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.normaal5_normaal5_0.geometry}
            material={getMaterial(hovered.normaal5_normaal5_0, materials.normaal5)}
            onPointerOver={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal5_normaal5_0: true }))
            }}
            onPointerLeave={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal5_normaal5_0: false }))
            }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('normaal5_normaal5_0') }}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.normaal4_normaal4_0.geometry}
            material={getMaterial(hovered.normaal4_normaal4_0, materials.normaal4)}
            onPointerOver={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal4_normaal4_0: true }))
            }}
            onPointerLeave={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, normaal4_normaal4_0: false }))
            }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('normaal4_normaal4_0') }}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.linkerlong3_linkerlong3_0.geometry}
            material={getMaterial(hovered.materialinkerlong3_linkerlong3_0ls2_6, materials.linkerlong3)}
            onPointerOver={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, materialinkerlong3_linkerlong3_0ls2_6: true }))
            }}
            onPointerLeave={(e) => {
              e.stopPropagation()
              setHovered(prev => ({ ...prev, materialinkerlong3_linkerlong3_0ls2_6: false }))
            }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('linkerlong3_linkerlong3_0') }}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/lungs.glb')
