/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 brain.glb --types 
Author: farhad.Guli (https://sketchfab.com/farhad.Guli)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/brain-6ca0844a846b400695ff54553dc9bda4
Title: Brain
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'
import { useMemo, useState } from 'react'
// import brain from '../assets/brain.glb'

type GLTFResult = GLTF & {
  nodes: {
    Material2: THREE.Mesh
    Material2_1: THREE.Mesh
    Material2_2: THREE.Mesh
    Material2_3: THREE.Mesh
    Material2_4: THREE.Mesh
    Material2_5: THREE.Mesh
    Material2_6: THREE.Mesh
    Material2_7: THREE.Mesh
    Material2_8: THREE.Mesh
    Material2_9: THREE.Mesh
    Material2_10: THREE.Mesh
  }
  materials: {
    material: THREE.MeshStandardMaterial
    edge_color808080255: THREE.LineBasicMaterial
    Color_A06: THREE.MeshStandardMaterial
    edge_color20400255: THREE.LineBasicMaterial
  }
  // animations: GLTFAction[]
}

type ModelProps = React.JSX.IntrinsicElements['group'] & {
  setIsSelected?: React.Dispatch<React.SetStateAction<string | null>>;
  info?: (key: string) => React.ReactNode;
}

export function Model(props: ModelProps) {
  const { setIsSelected, info, ...groupProps } = props;
  const { nodes, materials } = useGLTF('/brain.glb') as unknown as GLTFResult
  const initialState: Record<string, boolean> = {
    materials2: false,
    materials2_1: false,
    materials2_2: false,
    materials2_3: false,
    materials2_4: false,
    materials2_5: false,
    materials2_6: false,
    materials2_7: false,
    materials2_8: false,
    materials2_9: false,
    materials10: false
  }
  const [hovered, setHovered] = useState(initialState)
  function getMaterial(hovered: boolean, base: THREE.Material) {
    return hovered
      ? new THREE.MeshPhongMaterial({ color: 0x60C1DC }) // hover rengi
      : base
  }

  const memoMesh = useMemo(() => (
    <group {...groupProps} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2.geometry}
          material={getMaterial(hovered.materials2, materials.material)}
          position={[-1.085, 1.649, 0]}
          onPointerOver={(e) => {
            e.stopPropagation()
            setHovered(prev => ({ ...prev, materials2: true }))
          }}
          onPointerLeave={(e) => {
            e.stopPropagation()
            setHovered(prev => ({ ...prev, materials2: false }))
          }}
          onClick={() => setIsSelected && setIsSelected('materials2')}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_1.geometry}
          material={getMaterial(hovered.materials2_1, materials.material)}
          position={[-1.085, 1.649, 0]}
          onPointerOver={(e) => {
            e.stopPropagation()
            setHovered(prev => ({ ...prev, materials2_1: true }))
          }}
          onPointerLeave={(e) => {
            e.stopPropagation()
            setHovered(prev => ({ ...prev, materials2_1: false }))
          }}
          onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_1') }}
        />
        <group position={[-1.085, 1.649, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Material2_2.geometry}
            material={getMaterial(hovered.materials2_2, materials.material)}
            onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_2: true })) }}
            onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_2: false })) }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_2') }}
          />
          <lineSegments
            geometry={nodes.Material2_3.geometry}
            material={getMaterial(hovered.materials2_3, materials.material)}
            onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_3: true })) }}
            onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_3: false })) }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_3') }}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_4.geometry}
          material={getMaterial(hovered.materials2_4, materials.material)}
          position={[-1.085, 1.649, 0]}
          onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_4: true })) }}
          onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_4: false })) }}
          onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_4') }}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_5.geometry}
          material={getMaterial(hovered.materials2_5, materials.material)}
          position={[-1.085, 1.649, 0]}
          onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_5: true })) }}
          onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_5: false })) }}
          onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_5') }}
        />
        <group position={[-1.085, 1.649, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Material2_6.geometry}
            material={getMaterial(hovered.materials2_6, materials.material)}
            onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_6: true })) }}
            onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_6: false })) }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_6') }}
          />
          <lineSegments
            geometry={nodes.Material2_7.geometry}
            material={getMaterial(hovered.materials2_7, materials.edge_color808080255)}
            onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_7: true })) }}
            onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_7: false })) }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_7') }}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_8.geometry}
          material={getMaterial(hovered.materials2_8, materials.material)}
          position={[-1.085, 1.649, 0]}
          onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_8: true })) }}
          onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_8: false })) }}
          onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_8') }}
        />
        <group position={[-1.085, 1.649, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Material2_9.geometry}
            material={getMaterial(hovered.materials2_9, materials.Color_A06)}
            onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_9: true })) }}
            onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials2_9: false })) }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_9') }}
          />
          <lineSegments
            geometry={nodes.Material2_10.geometry}
            material={getMaterial(hovered.materials2_10, materials.edge_color808080255)}
            onPointerOver={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials10: true })) }}
            onPointerLeave={(e) => { e.stopPropagation(); setHovered(prev => ({ ...prev, materials10: false })) }}
            onClick={(e) => { e.stopPropagation(); setIsSelected && setIsSelected('materials2_10') }}
          />
        </group>
      </group>
    </group>
  ), [hovered, setIsSelected, nodes, materials, groupProps]);

  return memoMesh;
}

useGLTF.preload('/brain.glb')
